version: 2.1

jobs:
  # Has CMake 3.0, GCC 4.8
  alpine_3_1:
    docker:
      - image: alpine:3.1
    steps:
      - run: |
          apk update &&
          apk add cmake g++ make
      - checkout
      - run: |
          mkdir build &&
          cd build &&
          cmake .. -DCMAKE_BUILD_TYPE=Debug &&
          make -j `grep processor /proc/cpuinfo | wc -l`
      - run: build/test

  # Has CMake 3.18, GCC 10, Samurai 1.2
  alpine_3_13:
    docker:
      - image: alpine:3.13
    steps:
      - run: |
          apk update &&
          apk add cmake g++ samurai
      - checkout
      - run: |
          mkdir build &&
          cd build &&
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Debug &&
          samu
      - run: build/test

  #arch:
  #  docker:
  #    # FIXME: From archlinux:base-20210207.0.15200
  #    #          to archlinux:base-devel-20210214.0.15477 (latest as of 2020-02-20)
  #    #        cause build errors on CircleCI.
  #    #
  #    # The error is:
  #    #
  #    #   $ pacman -Sy --noconfirm cmake gcc samurai
  #    #   error: failed to initialize alpm library
  #    #   (could not find or read directory: /var/lib/pacman/)
  #    #
  #    # Possibly related to https://bugs.archlinux.org/task/69563.
  #    #
  #    # The last known version before this happened is base-20210131.0.14634
  #    # but that too gets an error on CircleCI:
  #    #
  #    #   $ cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Debug
  #    #   cmake: /usr/lib/libc.so.6: version `GLIBC_2.33' not found (required by cmake)
  #    #   cmake: /usr/lib/libc.so.6: version `GLIBC_2.33' not found (required by /usr/lib/libuv.so.1)
  #    #   cmake: /usr/lib/libc.so.6: version `GLIBC_2.33' not found (required by /usr/lib/libstdc++.so.6)
  #    #
  #    # CMake is now built on the new glibc 2.33, and this version of glibc
  #    # is related to the first error.
  #    - image: archlinux
  #  steps:
  #    - run: |
  #        pacman -Sy --noconfirm cmake gcc samurai
  #    - checkout
  #    - run: |
  #        mkdir build &&
  #        cd build &&
  #        cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Debug &&
  #        samu
  #    - run: build/test

  # Has CMake 2.8.12, GCC 4.8
  centos_7:
    docker:
      - image: centos:7
    steps:
      - run: |
          yum install -y cmake gcc-c++ make
      - checkout
      - run: |
          mkdir build &&
          cd build &&
          cmake .. -DCMAKE_BUILD_TYPE=Debug &&
          make -j `grep processor /proc/cpuinfo | wc -l`
      - run: build/test

  # Has CMake 3.11, GCC 8
  centos_8:
    docker:
      - image: centos:8
    steps:
      # Install libarchive to solve a build issue due to CMake/libarchive
      # version mismatch on CentOS 8. (2021-06-20)
      - run: |
          dnf install -y cmake gcc-c++ libarchive make
      - checkout
      - run: |
          mkdir build &&
          cd build &&
          cmake .. -DCMAKE_BUILD_TYPE=Debug &&
          make -j `grep processor /proc/cpuinfo | wc -l`
      - run: build/test

  # Has CMake 3.0, GCC 4.9
  debian_8_jessie:
    docker:
      - image: debian:8-slim
    steps:
      - run: |
          apt-get update &&
          apt-get install -y --no-install-recommends cmake g++ ninja-build
      - checkout
      - run: |
          mkdir build &&
          cd build &&
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Debug &&
          ninja
      - run: build/test

  # Has CMake 3.13, GCC 8
  debian_10_buster:
    docker:
      - image: debian:10-slim
    steps:
      - run: |
          apt-get update &&
          apt-get install -y --no-install-recommends cmake g++ ninja-build
      - checkout
      - run: |
          mkdir build &&
          cd build &&
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Debug &&
          ninja
      - run: build/test

  # Has CMake 2.8.12, GCC 4.8, Ninja 1.4
  fedora_20:
    docker:
      - image: fedora:20
    steps:
      - run: |
          yum install -y cmake gcc-c++ ninja-build
      - checkout
      - run: |
          mkdir build &&
          cd build &&
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Debug &&
          ninja-build
      - run: build/test

  # Has CMake 3.20, GCC 11, Ninja 1.10
  fedora_34:
    docker:
      - image: fedora:34
    steps:
      - run: |
          dnf install -y cmake gcc-c++ ninja-build
      - checkout
      - run: |
          mkdir build &&
          cd build &&
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Debug &&
          ninja
      - run: build/test

  # Has CMake 3.3, GCC 4.9, Ninja 1.6
  #nix_1_1_0:
  #  shell: /bin/sh
  #  docker:
  #    - image: nixos/nix:1.1.0
  #  steps:
  #    - checkout
  #    - run: |
  #        nix-env -i bash &&
  #        mkdir build &&
  #        cd build &&
  #        nix-shell -p cmake gcc ninja --run 'cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Debug && ninja && ./test'

  # Has CMake 3.17, GCC 9.3, Samurai 1.1
  nix_2_3_6:
    shell: /bin/sh
    docker:
      - image: nixos/nix:2.3.6
    steps:
      - checkout
      - run: |
          mkdir build &&
          cd build &&
          nix-shell -p cmake gcc samurai --run 'cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Debug && samu && ./test'

  # Has CMake 2.8.12, GCC 4.9, Ninja 1.3
  ubuntu_14_04_trusty:
    docker:
      - image: ubuntu:14.04
    steps:
      - run: |
          apt-get update &&
          apt-get install -y --no-install-recommends cmake g++ ninja-build
      - checkout
      - run: |
          mkdir build &&
          cd build &&
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Debug &&
          ninja
      - run: build/test

  # Has CMake 3.16, GCC 10, Ninja 1.10
  ubuntu_20_10_groovy:
    docker:
      - image: ubuntu:20.10
    steps:
      - run: |
          apt-get update &&
          apt-get install -y --no-install-recommends cmake g++ ninja-build
      - checkout
      - run: |
          mkdir build &&
          cd build &&
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Debug &&
          ninja
      - run: build/test

  void:
    shell: /bin/sh
    docker:
      - image: voidlinux/voidlinux:latest
    steps:
      - run: |
          xbps-install -Suy xbps &&
          xbps-install -y bash cmake gcc samurai
      - checkout
      - run: |
          mkdir build &&
          cd build &&
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Debug &&
          samu
      - run: build/test

  void_musl:
    shell: /bin/sh
    docker:
      - image: voidlinux/voidlinux-musl:latest
    steps:
      - run: |
          xbps-install -Suy xbps &&
          xbps-install -y cmake gcc samurai
      - checkout
      - run: |
          mkdir build &&
          cd build &&
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Debug &&
          samu
      - run: build/test

workflows:
  version: 2
  build_all:
    jobs:
      - alpine_3_1
      - alpine_3_13
      #- arch
      - centos_7
      - centos_8
      - debian_8_jessie
      - debian_10_buster
      - fedora_20
      - fedora_34
      - nix_2_3_6
      - ubuntu_14_04_trusty
      - ubuntu_20_10_groovy
      - void
      - void_musl
